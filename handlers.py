# handlers.py
import logging
import json
from telegram import Update,  Message, BotCommand, ReplyKeyboardRemove
from telegram.ext import  ContextTypes,  CallbackContext,  ConversationHandler, JobQueue
from datetime import datetime
from geopy.distance import geodesic

from config import *
from db import (
     update_user_state, get_user_data, set_user_name, update_user_name,
    get_all_queues, get_user_created_queues, get_queue_by_id, get_queue_name_by_id, get_queue_id_by_name,
    get_queue_users_names, get_queue_users_ids, get_user_name, is_user_in_queue, get_user_queues,
    delete_queue, swap_queue_users,  insert_queue, remove_user_from_queue,
    insert_broadcast, get_broadcasts, delete_broadcast
)
from utils import (
    build_main_menu, build_location_menu, validate_date,
    validate_time, check_distance_and_join, create_join_queue_button,
    send_queue_created_message, build_queues_menu, build_delete_queue_menu, build_leave_queue_menu,
    build_skip_turn_menu, build_queue_info_menu, generate_queue_info_message, build_web_app_location_button
)

logger = logging.getLogger(__name__)

# --- Command Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.message.from_user
    user_id = user.id
    conn = context.bot_data['conn']

    result = get_user_data(conn, user_id)
    if result:
        reply_markup = build_main_menu()
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:", parse_mode="Markdown")
        update_user_state(conn, user_id, "waiting_for_name")

async def set_name(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    user_id = user.id
    user_name = update.message.text
    conn = context.bot_data['conn']

    set_user_name(conn, user_id, user_name)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –∏–º—è *{user_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", parse_mode="Markdown")
    update_user_state(conn, user_id, "name_entered")

    reply_markup = build_main_menu()
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

async def change_name_start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏."""
    await update.callback_query.message.reply_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–∏–º—è*:", parse_mode="Markdown")
    return CHANGE_NAME

async def change_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏."""
    user = update.message.from_user
    user_id = user.id
    new_name = update.message.text
    conn = context.bot_data['conn']

    update_user_name(conn, user_id, new_name)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{new_name}*.", parse_mode="Markdown")
    update_user_state(conn, user_id, "name_entered")

    reply_markup = build_main_menu()
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    return ConversationHandler.END

async def create_queue_start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    await update.message.reply_text(
        "üìå *–°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*\n\n"
        "üîπ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*.\n",
        parse_mode="Markdown"
    )
    return QUEUE_NAME

async def create_queue_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    context.user_data['queue_name'] = update.message.text
    await update.message.reply_text(
        f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:* `{update.message.text}`\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–î–î.–ú–ú.–ì–ì_.\n"
        "üìÜ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É*, –≤–≤–µ–¥–∏—Ç–µ /today.\n",
        parse_mode="Markdown"
    )
    return QUEUE_DATE

async def create_queue_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ—á–µ—Ä–µ–¥–∏."""
    user_input = update.message.text.strip()

    if user_input == "/today":
        today = datetime.now(GMT_PLUS_5).strftime("%d.%m.%y")
        context.user_data['queue_date'] = today
        await update.message.reply_text(
            f"‚úÖ *–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞:* `{today}` üìÜ\n\n"
            "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ß–ß:–ú–ú_.\n"
            "‚è∞ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è*, –≤–≤–µ–¥–∏—Ç–µ /now.\n",
            parse_mode="Markdown"
        )
        return QUEUE_TIME

    if not validate_date(user_input):
        await update.message.reply_text(
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
            "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _–î–î.–ú–ú.–ì–ì_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /today –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.",
            parse_mode="Markdown"
        )
        return QUEUE_DATE

    context.user_data['queue_date'] = user_input
    await update.message.reply_text(
        "üìÖ *–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!* ‚úÖ\n\n"
        "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ß–ß:–ú–ú_.\n"
        "‚è∞ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è*, –≤–≤–µ–¥–∏—Ç–µ /now.\n",
        parse_mode="Markdown"
    )
    return QUEUE_TIME

async def create_queue_time(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—á–µ—Ä–µ–¥–∏."""
    user_input = update.message.text.strip()

    if user_input == "/now":
        now_time = datetime.now(GMT_PLUS_5).strftime("%H:%M")
        context.user_data['queue_time'] = now_time
        await update.message.reply_text(
            f"‚úÖ *–í—ã–±—Ä–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* `{now_time}` ‚è∞\n\n"
            "üìç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ *–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*:",
            parse_mode="Markdown"
        )
    else:
        if not validate_time(update.message.text):
            await update.message.reply_text(
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _–ß–ß:–ú–ú_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /now –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
                parse_mode="Markdown"
            )
            return QUEUE_TIME

        context.user_data['queue_time'] = update.message.text

    reply_markup = build_location_menu()
    await update.message.reply_text(
        "üåç *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:*",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return CHOOSE_LOCATION

async def create_queue_location(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "location_mathfac":
        context.user_data['latitude'] = MF_COORDINATES[0]
        context.user_data['longitude'] = MF_COORDINATES[1]
        await create_queue_final(update, context)
        return ConversationHandler.END

    elif query.data == "location_custom":
        await query.message.edit_text(
            "üìç *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é* –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:",
            parse_mode="Markdown"
        )
        return CHOOSE_LOCATION

async def create_queue_location_custom(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    location = update.message.location
    context.user_data['latitude'] = location.latitude
    context.user_data['longitude'] = location.longitude
    await create_queue_final(update, context)
    return ConversationHandler.END

async def create_queue_final(update: Update, context: CallbackContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏."""
    name = context.user_data['queue_name']
    date_str = context.user_data['queue_date']
    time_str = context.user_data['queue_time']
    latitude = context.user_data['latitude']
    longitude = context.user_data['longitude']
    conn = context.bot_data['conn']

    try:
        start_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%y %H:%M")
    except ValueError:
        await update.effective_message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    start_time_gmt5 = start_time.replace(tzinfo=GMT_PLUS_5)
    insert_queue(conn, name, start_time_gmt5, latitude, longitude, update.effective_user.id)

    location_message = await update.effective_message.reply_location(
        latitude=latitude,
        longitude=longitude,
        reply_markup=None
    )

    queue_id = get_queue_id_by_name(conn, name)
    if not queue_id:
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—á–µ—Ä–µ–¥–∏.")
        return

    reply_markup = await create_join_queue_button(context, queue_id)
    queue_message = await send_queue_created_message(update, context, name, start_time, reply_markup)

    context.user_data['queue_message_id'] = queue_message.message_id
    context.user_data['location_message_id'] = location_message.message_id

    time_until_deletion = (start_time_gmt5 + timedelta(hours=5)) - datetime.now(GMT_PLUS_5)
    seconds_until_deletion = max(time_until_deletion.total_seconds(), 0)
    context.job_queue.run_once(delete_queue_job, seconds_until_deletion, data=queue_id)
    context.user_data.pop('queue_name', None)

    return ConversationHandler.END

async def handle_deeplink(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deeplink."""
    conn = context.bot_data['conn']
    if update.message:
        message_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

        if not message_text.startswith("/start") or len(message_text.split()) <= 1:
            return

        payload = message_text.split()[1]
        if payload.startswith("join_"):
            try:
                queue_id = int(payload[5:])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—á–µ—Ä–µ–¥–∏.")
                return

            user_id = update.effective_user.id
            queue = await get_queue_by_id(conn, queue_id)
            if not queue:
                await update.message.reply_text("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if not get_user_data(conn, user_id):
                await update.message.reply_text(
                    "üìå –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
                    parse_mode="Markdown"
                )
                return

            context.user_data['queue_id'] = queue_id
            context.user_data['user_id'] = user_id
            await ask_location(update, context)
    elif update.callback_query:
        pass  # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è

async def delete_queue_job(context: CallbackContext) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
    queue_id = context.job.data
    conn = context.bot_data['conn']
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏ —Å ID {queue_id}")
        return

    delete_queue(conn, queue_id)
    await context.bot.send_message(ADMIN_ID, f"‚úÖ –û—á–µ—Ä–µ–¥—å {queue_name} (ID {queue_id}) –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="Markdown")
    logger.info(f"–û—á–µ—Ä–µ–¥—å {queue_name} (ID {queue_id}) –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.")

async def delete_queue_start(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫)."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    queues_list = get_all_queues(conn) if user_id == ADMIN_ID else get_user_created_queues(conn, user_id)
    if not queues_list:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    reply_markup = build_delete_queue_menu(queues_list)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:", reply_markup=reply_markup, parse_mode="Markdown")

async def delete_queue_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    user_id = update.effective_user.id
    queue_id = int(query.data.split("_")[2])
    queue = await get_queue_by_id(conn, queue_id)

    if not queue:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if user_id != ADMIN_ID and queue['creator_id'] != user_id:
        await query.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ—á–µ—Ä–µ–¥—å.")
        return

    queue_name = get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    delete_queue(conn, queue_id)
    await query.edit_message_text(f"‚úÖ –û—á–µ—Ä–µ–¥—å *{queue_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="Markdown")

async def leave_queue(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –≤—ã—Ö–æ–¥–∞."""
    user_id = update.message.from_user.id
    conn = context.bot_data['conn']

    if not get_user_data(conn, user_id):
        await update.message.reply_text("üìå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* /start.", parse_mode="Markdown")
        return

    user_queues = get_user_queues(conn, user_id)
    if not user_queues:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö.")
        return

    reply_markup = build_leave_queue_menu(user_queues)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã—Ö–æ–¥–∞:", reply_markup=reply_markup)

async def leave_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    user_id = query.from_user.id
    queue_id = int(query.data.split("_")[1])
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    remove_user_from_queue(conn, queue_id, user_id)
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: *{queue_name}*.", parse_mode="Markdown")

async def skip_turn(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
    user_id = update.message.from_user.id
    conn = context.bot_data['conn']

    if not get_user_data(conn, user_id):
        await update.message.reply_text("üìå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* /start.", parse_mode="Markdown")
        return

    user_queues = get_user_queues(conn, user_id)
    if not user_queues:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö.")
        return

    reply_markup = build_skip_turn_menu(user_queues)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã *–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å* —Ö–æ–¥:", reply_markup=reply_markup, parse_mode="Markdown")

async def skip_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    queue_id = int(query.data.split("_")[1])
    user_id = update.effective_user.id
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    user_name = get_user_name(conn, user_id)
    if not user_name:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ –∏–º—è.")
            return

    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        await query.edit_message_text("‚ùå –¢–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç.")
        return

    queue_users_ids = get_queue_users_ids(conn, queue_id)
    if not queue_users_ids:
        await query.edit_message_text("üîç –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    if user_id not in queue_users_ids:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
        return

    current_index = queue_users_ids.index(user_id)

    if current_index + 1 < len(queue_users_ids):
        user1_id = queue_users_ids[current_index]
        user2_id = queue_users_ids[current_index + 1]
        swap_queue_users(conn, queue_id, user1_id, user2_id)
        user2_name = get_user_name(conn, user2_id)

        if user2_name:
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥. –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ *{user2_name}*.", parse_mode="Markdown")
            await context.bot.send_message(chat_id=user2_id, text=f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –ø–µ—Ä–µ–¥ *{user_name}* –≤ '{queue_name}'.", parse_mode="Markdown")
    else:
        await query.edit_message_text("‚ùå –í—ã –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

async def queue_info(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    user_id = update.message.from_user.id
    conn = context.bot_data['conn']

    if not get_user_data(conn, user_id):
        await update.message.reply_text("üìå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* /start.", parse_mode="Markdown")
        return

    user_queues = get_user_queues(conn, user_id)
    if not user_queues:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö.")
        return

    reply_markup = build_queue_info_menu(user_queues)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup)

async def queue_info_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    callback_data = query.data
    data_parts = callback_data.split("_")

    if len(data_parts) >= 2 and data_parts[1].isdigit():
        queue_id = int(data_parts[1])
    elif len(data_parts) >= 3 and data_parts[2].isdigit():
        queue_id = int(data_parts[2])
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    message = await generate_queue_info_message(conn, queue_id)
    await query.edit_message_text(message)

async def show_queues(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π."""
    conn = context.bot_data['conn']
    queues_list = get_all_queues(conn)

    if queues_list:
        reply_markup = build_queues_menu(queues_list)
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup)
    else:
        await update.effective_message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.")

async def handle_web_app_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Web App (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)."""
    conn = context.bot_data['conn']
    try:
        data = json.loads(update.message.web_app_data.data)
        lat = data.get("lat")
        lon = data.get("lon")

        if not lat or not lon:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.", reply_markup=ReplyKeyboardRemove())
            return

        queue_id = context.user_data.get("queue_id")
        user_id = context.user_data.get("user_id")

        if not queue_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å.", reply_markup=ReplyKeyboardRemove())
            return

        await check_distance_and_join(update, context, queue_id, user_id, lat, lon)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=ReplyKeyboardRemove())

async def ask_location(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = context.bot_data['conn']

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (CallbackQuery –∏–ª–∏ Message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
        data_parts = query.data.split("_")
        if len(data_parts) < 3 or not data_parts[2].isdigit():
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        queue_id = int(data_parts[2])
        user_id = update.effective_user.id

    elif update.message:
        message = update.message
        queue_id = context.user_data.get("queue_id")
        user_id = message.from_user.id
        if not queue_id:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω ID –æ—á–µ—Ä–µ–¥–∏.")
            return
    else:
        return

    context.user_data['queue_id'] = queue_id
    context.user_data['user_id'] = user_id

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤)
    info_message = await generate_queue_info_message(conn, queue_id)
    await message.reply_text(info_message)


    if is_user_in_queue(conn, queue_id, user_id):
        await message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å.")
        return

    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if queue["start_time"] > datetime.now(GMT_PLUS_5):
        await message.reply_text(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–Ω–µ—Ç—Å—è *{queue['start_time'].strftime('%d.%m.%Y %H:%M')}* ‚è∞", parse_mode="Markdown")
        return

    context.user_data["expecting_location_for"] = queue_id
    reply_markup = build_web_app_location_button()

    queue_name = queue['queue_name'] if update.callback_query else get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è")
        return

    sent_message = await message.reply_text(
        f"üìå –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ '{queue_name}', –Ω–∞–∂–º–∏—Ç–µ *–∫–Ω–æ–ø–∫—É* –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    context.user_data["location_message_id"] = sent_message.message_id

async def main_menu_buttons(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == "show_queues":
        await show_queues(update, context)
    elif query.data == "change_name":
        await change_name_start(update, context)

async def unknown(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö CallbackQuery."""
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("‚ùå –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!")

async def help_command(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "/start - –ù–∞—á–∞—Ç—å (–≤–≤–æ–¥ –∏–º–µ–Ω–∏)\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å\n"
        "/create_queue - –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/delete_queue - –£–¥–∞–ª–∏—Ç—å\n"
        "/leave - –ü–æ–∫–∏–Ω—É—Ç—å\n"
        "/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥\n"
        "/queue_info - –°–ø–∏—Å–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/show_queues - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏\n"
        "/help - –ü–æ–º–æ—â—å (—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)\n"
    )
    await update.message.reply_text(help_text)

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",  parse_mode="Markdown") #reply_markup=ReplyKeyboardRemove(),
    return ConversationHandler.END

async def set_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞"),
        BotCommand("queue_info", "–°–ø–∏—Å–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏"),
        BotCommand("show_queues", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏"),
        BotCommand("leave", "–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        BotCommand("skip", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥"),
        BotCommand("create_queue", "–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        BotCommand("delete_queue", "–£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
    ]
    try:
        await app.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

async def load_scheduled_broadcasts(job_queue: JobQueue):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    conn = job_queue.application.bot_data['conn']
    for row in get_broadcasts(conn):
        broadcast_id, text, photo, recipients, send_time_str = row
        send_time = datetime.fromisoformat(send_time_str).replace(tzinfo=GMT_PLUS_5)
        delay = (send_time - datetime.now(GMT_PLUS_5)).total_seconds()

        if delay > 0:
            job_queue.run_once(send_broadcast, delay, data={
                'broadcast_id': broadcast_id,
                'broadcast_text': text if text else '',
                'broadcast_photo': photo if photo else '',
                'broadcast_targets': recipients
            })

async def start_broadcast(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return ConversationHandler.END

    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    text = update.message.caption if update.message.caption else update.message.text
    photo = update.message.photo[-1].file_id if update.message.photo else None
    context.user_data['broadcast_text'] = text if text else ''
    context.user_data['broadcast_photo'] = photo if photo else ''

    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π /all:")
    return BROADCAST_TARGETS

async def broadcast_targets(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    if update.message.text.lower() == '/all':
        context.user_data['broadcast_targets'] = 'all'
    else:
        context.user_data['broadcast_targets'] = list(map(int, update.message.text.split()))
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú):")
    return BROADCAST_SCHEDULE

async def broadcast_schedule(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    conn = context.bot_data['conn']
    user_input = update.message.text.strip()

    try:
        send_time = datetime.strptime(user_input, "%d.%m.%y %H:%M").replace(tzinfo=GMT_PLUS_5)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú:")
        return BROADCAST_SCHEDULE

    context.user_data['broadcast_time'] = send_time
    broadcast_id = insert_broadcast(
        conn,
        context.user_data['broadcast_text'],
        context.user_data['broadcast_photo'],
        ','.join(map(str, context.user_data['broadcast_targets'])) if context.user_data['broadcast_targets'] != 'all' else 'all',
        send_time
    )

    context.job_queue.run_once(send_broadcast, (send_time - datetime.now(GMT_PLUS_5)).total_seconds(), data={
        'broadcast_id': broadcast_id,
        'broadcast_text': context.user_data['broadcast_text'],
        'broadcast_photo': context.user_data['broadcast_photo'],
        'broadcast_targets': context.user_data['broadcast_targets']
    })
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    return ConversationHandler.END

async def send_broadcast(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."""
    conn = context.bot_data['conn']
    data = context.job.data
    text = data.get('broadcast_text', '').strip()
    photo = data.get('broadcast_photo', '').strip()
    targets = data.get('broadcast_targets')

    if targets == 'all':
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = [row[0] for row in cursor.fetchall()]
    else:
        users = list(map(int, targets.split(',')))

    for user_id in users:
        try:
            if photo and text:
                await context.bot.send_photo(chat_id=user_id, photo=photo, caption=text, parse_mode="Markdown")
            elif photo:
                await context.bot.send_photo(chat_id=user_id, photo=photo)
            else:
                await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
    delete_broadcast(conn, data['broadcast_id'])