# handlers.py
import logging
import json
from telegram import Update,  Message, BotCommand, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, LinkPreviewOptions
from telegram.ext import  ContextTypes,  CallbackContext,  ConversationHandler, JobQueue
from datetime import datetime
from geopy.distance import geodesic

from config import *
from varibles import *
from db import *
from utils import *

logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    result = get_user_data(conn, user_id)
    if result:
        reply_markup = build_main_menu()
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
        return ConversationHandler.END 
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")
        context.user_data['state'] = WAITING_FOR_NAME 
        return WAITING_FOR_NAME 

async def set_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    user_name = update.message.text
    conn = context.bot_data['conn']
    set_user_name(conn, user_id, user_name)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –∏–º—è *{user_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    reply_markup = build_main_menu()
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    return ConversationHandler.END

async def change_name_start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏."""
    await update.callback_query.message.reply_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–∏–º—è*:")
    return CHANGE_NAME

async def change_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏."""
    user = update.message.from_user
    user_id = user.id
    new_name = update.message.text
    conn = context.bot_data['conn']

    update_user_name(conn, user_id, new_name)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{new_name}*.")
    update_user_state(conn, user_id, "name_entered")

    reply_markup = build_main_menu()
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    return ConversationHandler.END

async def create_queue_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ (–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã)."""
    await update.message.reply_text(
        "üìå *–°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*\n\n"
        "üîπ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*.\n",
        
    )
    return QUEUE_NAME

async def create_queue_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    context.user_data['queue_name'] = update.message.text
    await update.message.reply_text(
        f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:* `{update.message.text}`\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–î–î.–ú–ú.–ì–ì_.\n"
        "üìÜ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É*, –≤–≤–µ–¥–∏—Ç–µ /today.\n",
        
    )
    return QUEUE_DATE

async def create_queue_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ—á–µ—Ä–µ–¥–∏."""
    user_input = update.message.text.strip()

    if user_input == "/today":
        today = datetime.now(GMT_PLUS_5).strftime("%d.%m.%y")
        context.user_data['queue_date'] = today
        await update.message.reply_text(
            f"‚úÖ *–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞:* `{today}` üìÜ\n\n"
            "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ß–ß:–ú–ú_.\n"
            "‚è∞ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è*, –≤–≤–µ–¥–∏—Ç–µ /now.\n",
            
        )
        return QUEUE_TIME

    if not validate_date(user_input):
        await update.message.reply_text(
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
            "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _–î–î.–ú–ú.–ì–ì_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /today –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.",
            
        )
        return QUEUE_DATE

    context.user_data['queue_date'] = user_input
    await update.message.reply_text(
        "üìÖ *–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!* ‚úÖ\n\n"
        "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ß–ß:–ú–ú_.\n"
        "‚è∞ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è*, –≤–≤–µ–¥–∏—Ç–µ /now.\n",
        
    )
    return QUEUE_TIME

async def create_queue_time(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—á–µ—Ä–µ–¥–∏."""
    user_input = update.message.text.strip()

    if user_input == "/now":
        now_time = datetime.now(GMT_PLUS_5).strftime("%H:%M")
        context.user_data['queue_time'] = now_time
        await update.message.reply_text(
            f"‚úÖ *–í—ã–±—Ä–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* `{now_time}` ‚è∞\n\n"
            "üìç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ *–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*:",
            
        )
    else:
        if not validate_time(update.message.text):
            await update.message.reply_text(
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _–ß–ß:–ú–ú_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /now –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
                
            )
            return QUEUE_TIME

        context.user_data['queue_time'] = update.message.text

    reply_markup = build_location_menu()
    await update.message.reply_text(
        "üåç *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:*",
        reply_markup=reply_markup,
        
    )
    return CHOOSE_LOCATION

async def create_queue_location(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "location_mathfac":
        context.user_data['latitude'] = MF_COORDINATES[0]
        context.user_data['longitude'] = MF_COORDINATES[1]
        # await create_queue_final(update, context)
        conn = context.bot_data['conn']
        user_id = update.effective_user.id
        user_groups = get_user_groups(conn, user_id)
        reply_markup = build_select_group_menu(user_groups)
        await query.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ (–∏–ª–∏ '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'):", reply_markup=reply_markup)
        return CHOOSE_GROUP

    elif query.data == "location_custom":
        await query.message.edit_text(
            "üìç *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é* –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:",
            
        )
        return CHOOSE_LOCATION

async def create_queue_location_custom(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    location = update.message.location
    context.user_data['latitude'] = location.latitude
    context.user_data['longitude'] = location.longitude
    # await create_queue_final(update, context)
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    user_groups = get_user_groups(conn, user_id)
    reply_markup = build_select_group_menu(user_groups)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ (–∏–ª–∏ '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'):", reply_markup=reply_markup)
    return CHOOSE_GROUP

async def create_queue_choose_group(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    group_id_str = query.data

    if group_id_str == "select_group_none":
        context.user_data['group_id'] = None
        await query.edit_message_text("‚úÖ –û—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –±–µ–∑ –≥—Ä—É–ø–ø—ã")

    elif group_id_str.startswith("select_group_"):
        try:
            group_id = int(group_id_str.split("_")[2])
            conn = context.bot_data['conn']
            group_name = get_group_by_id(conn, group_id)["group_name"]
            context.user_data['group_id'] = group_id
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ *{group_name}*")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
            return CHOOSE_GROUP
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã–±–æ—Ä.")
        return CHOOSE_GROUP
    return await create_queue_final(update, context)

async def create_queue_final(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ (—Å –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –±–µ–∑)."""
    name = context.user_data['queue_name']
    date_str = context.user_data['queue_date']
    time_str = context.user_data['queue_time']
    latitude = context.user_data['latitude']
    longitude = context.user_data['longitude']
    group_id = context.user_data.get('group_id')
    conn = context.bot_data['conn']

    try:
        start_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%y %H:%M")
    except ValueError:
        await update.effective_message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.",
            
        )
        return ConversationHandler.END

    start_time_gmt5 = start_time.replace(tzinfo=GMT_PLUS_5)

    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤ –ë–î (—Å group_id –∏–ª–∏ NULL)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO queues (queue_name, start_time, latitude, longitude, creator_id, group_id)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (name, start_time_gmt5.isoformat(), latitude, longitude, update.effective_user.id, group_id))
    conn.commit()
    queue_id = cursor.lastrowid


    location_message = await update.effective_message.reply_location(
        latitude=latitude,
        longitude=longitude
    )
    context.user_data['queue_message_id'] = None #–ü–æ–∫–∞ —á—Ç–æ None
    context.user_data['location_message_id'] = location_message.message_id
    context.user_data['queue_id'] = queue_id

    if group_id:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="send_notification_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="send_notification_no")]
        ]
        logger.debug(update)

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.effective_message.reply_text(
            "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã?",
            reply_markup=reply_markup
        )
        return SEND_NOTIFICATION
    else:
        #–ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç - —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
        await finish_queue_creation(update, context)
        return ConversationHandler.END

async def send_notification_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "send_notification_yes":
        await query.edit_message_text("üîî –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        await send_group_notification(update, context) 
    else:
        await query.edit_message_text("üîï –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

    await finish_queue_creation(update, context)
    return ConversationHandler.END

async def send_group_notification(update:Update, context:CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    conn = context.bot_data['conn']
    group_id = context.user_data.get('group_id')
    queue_id = context.user_data.get('queue_id')
    queue_creator_id = update.effective_user.id
    queue_name = context.user_data.get('queue_name')

    #–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    date_str = context.user_data['queue_date']
    time_str = context.user_data['queue_time']
    start_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%y %H:%M")


    if not group_id or not queue_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –Ω–µ—Ç group_id –∏–ª–∏ queue_id")
        return

    users = get_group_users(conn, group_id)
    if not users:
        logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ {group_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return

    reply_markup = await create_join_queue_button(context, queue_id)  # –∫–Ω–æ–ø–∫–∞
    message_text = (
        f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å *{queue_name}*! üïí\n"
        f"üìÜ –î–∞—Ç–∞: *{start_time.strftime('%d.%m.%y')}*\n"
        f"‚è∞ –í—Ä–µ–º—è: *{start_time.strftime('%H:%M')}*\n\n"
        f"üìç *–õ–æ–∫–∞—Ü–∏—è:* (—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã—à–µ)\n\n"
        f"‚û° *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!*")

    for user_id in users:
        if user_id != queue_creator_id:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text = message_text,
                    reply_markup=reply_markup,
                    link_preview_options=LinkPreviewOptions(is_disabled=True)
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ {queue_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id} –æ–± {queue_id}: {e}")

async def finish_queue_creation(update:Update, context:CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —á–∞—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏"""

    #–ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    conn = context.bot_data['conn']
    queue_id = context.user_data.get('queue_id')
    queue_name = context.user_data.get('queue_name')
    date_str = context.user_data['queue_date']
    time_str = context.user_data['queue_time']
    start_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%y %H:%M")
    start_time_gmt5 = start_time.replace(tzinfo=GMT_PLUS_5)

    #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    reply_markup = await create_join_queue_button(context, queue_id)
    #–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    queue_message = await send_queue_created_message(update, context, queue_name, start_time, reply_markup)
    context.user_data['queue_message_id'] = queue_message.message_id #–°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    #–£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤
    time_until_deletion = (start_time_gmt5 + timedelta(hours=5)) - datetime.now(GMT_PLUS_5)
    seconds_until_deletion = max(time_until_deletion.total_seconds(), 0)
    context.job_queue.run_once(delete_queue_job, seconds_until_deletion, data=queue_id)

    #–ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('queue_name', None)
    context.user_data.pop('group_id', None)


async def handle_deeplink(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deeplink."""
    conn = context.bot_data['conn']
    if update.message:
        message_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

        if not message_text.startswith("/start") or len(message_text.split()) <= 1:
            return

        payload = message_text.split()[1]
        if payload.startswith("join_"):
            try:
                queue_id = int(payload[5:])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—á–µ—Ä–µ–¥–∏.")
                return

            user_id = update.effective_user.id
            queue = await get_queue_by_id(conn, queue_id)
            if not queue:
                await update.message.reply_text("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if not get_user_data(conn, user_id):
                await update.message.reply_text(
                    "üìå –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
                    
                )
                return

            context.user_data['queue_id'] = queue_id
            context.user_data['user_id'] = user_id
            await ask_location(update, context)
    elif update.callback_query:
        pass  # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è

async def delete_queue_job(context: CallbackContext) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
    queue_id = context.job.data
    conn = context.bot_data['conn']
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏ —Å ID {queue_id}")
        return

    delete_queue(conn, queue_id)
    await context.bot.send_message(ADMIN_ID, f"‚úÖ –û—á–µ—Ä–µ–¥—å {queue_name} (ID {queue_id}) –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.")
    logger.info(f"–û—á–µ—Ä–µ–¥—å {queue_name} (ID {queue_id}) –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.")

async def delete_queue_start(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫)."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    queues_list = get_all_queues(conn) if user_id == ADMIN_ID else get_user_created_queues(conn, user_id)
    if not queues_list:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    reply_markup = build_delete_queue_menu(queues_list)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:", reply_markup=reply_markup)

async def delete_queue_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    user_id = update.effective_user.id
    queue_id = int(query.data.split("_")[2])
    queue = await get_queue_by_id(conn, queue_id)

    if not queue:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if user_id != ADMIN_ID and queue['creator_id'] != user_id:
        await query.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ—á–µ—Ä–µ–¥—å.")
        return

    queue_name = get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    delete_queue(conn, queue_id)
    await query.edit_message_text(f"‚úÖ –û—á–µ—Ä–µ–¥—å *{queue_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

async def leave_queue(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –≤—ã—Ö–æ–¥–∞."""
    user_id = update.message.from_user.id
    conn = context.bot_data['conn']

    if not get_user_data(conn, user_id):
        await update.message.reply_text("üìå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* /start.")
        return

    user_queues = get_user_queues(conn, user_id)
    if not user_queues:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö.")
        return

    reply_markup = build_leave_queue_menu(user_queues)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã—Ö–æ–¥–∞:", reply_markup=reply_markup)

async def leave_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    user_id = query.from_user.id
    queue_id = int(query.data.split("_")[1])
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    remove_user_from_queue(conn, queue_id, user_id)
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: *{queue_name}*.")

async def skip_turn(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
    user_id = update.message.from_user.id
    conn = context.bot_data['conn']

    if not get_user_data(conn, user_id):
        await update.message.reply_text("üìå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* /start.")
        return

    user_queues = get_user_queues(conn, user_id)
    if not user_queues:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö.")
        return

    reply_markup = build_skip_turn_menu(user_queues)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã *–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å* —Ö–æ–¥:", reply_markup=reply_markup)

async def skip_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    queue_id = int(query.data.split("_")[1])
    user_id = update.effective_user.id
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    user_name = get_user_name(conn, user_id)
    if not user_name:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ –∏–º—è.")
            return

    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        await query.edit_message_text("‚ùå –¢–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç.")
        return

    queue_users_ids = get_queue_users_ids(conn, queue_id)
    if not queue_users_ids:
        await query.edit_message_text("üîç –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    if user_id not in queue_users_ids:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
        return

    current_index = queue_users_ids.index(user_id)

    if current_index + 1 < len(queue_users_ids):
        user1_id = queue_users_ids[current_index]
        user2_id = queue_users_ids[current_index + 1]
        swap_queue_users(conn, queue_id, user1_id, user2_id)
        user2_name = get_user_name(conn, user2_id)

        if user2_name:
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥. –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ *{user2_name}*.")
            await context.bot.send_message(chat_id=user2_id, text=f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –ø–µ—Ä–µ–¥ *{user_name}* –≤ '{queue_name}'.")
    else:
        await query.edit_message_text("‚ùå –í—ã –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

async def queue_info(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    user_id = update.message.from_user.id
    conn = context.bot_data['conn']

    if not get_user_data(conn, user_id):
        await update.message.reply_text("üìå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* /start.")
        return

    user_queues = get_user_queues(conn, user_id)
    if not user_queues:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—è—Ö.")
        return

    reply_markup = build_queue_info_menu(user_queues)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup)

async def queue_info_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    callback_data = query.data
    data_parts = callback_data.split("_")

    if len(data_parts) >= 2 and data_parts[1].isdigit():
        queue_id = int(data_parts[1])
    elif len(data_parts) >= 3 and data_parts[2].isdigit():
        queue_id = int(data_parts[2])
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    message = await generate_queue_info_message(conn, queue_id)
    await query.edit_message_text(message)

async def show_queues(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π (—Å —É—á–µ—Ç–æ–º –≥—Ä—É–ø–ø)."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_groups = get_user_groups(conn, user_id)
    group_ids = [group['group_id'] for group in user_groups]

    # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã
    queues_list = []
    for group_id in group_ids:
        queues_list.extend(get_queues_by_group(conn, group_id))
    queues_list.extend(get_queues_by_group(conn, None))  # –û—á–µ—Ä–µ–¥–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã


    if queues_list:
        reply_markup = build_queues_menu(queues_list)
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup)
    else:
        await update.effective_message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.")

async def handle_web_app_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Web App (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)."""
    conn = context.bot_data['conn']
    try:
        data = json.loads(update.message.web_app_data.data)
        lat = data.get("lat")
        lon = data.get("lon")

        if not lat or not lon:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.", reply_markup=ReplyKeyboardRemove())
            return

        queue_id = context.user_data.get("queue_id")
        user_id = context.user_data.get("user_id")

        if not queue_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å.", reply_markup=ReplyKeyboardRemove())
            return
        
        await check_distance_and_join(update, context, queue_id, user_id, lat, lon)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=ReplyKeyboardRemove())

async def ask_location(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = context.bot_data['conn']

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (CallbackQuery –∏–ª–∏ Message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
        data_parts = query.data.split("_")
        if len(data_parts) < 3 or not data_parts[2].isdigit():
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        queue_id = int(data_parts[2])
        user_id = update.effective_user.id

    elif update.message:
        message = update.message
        queue_id = context.user_data.get("queue_id")
        user_id = message.from_user.id
        if not queue_id:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω ID –æ—á–µ—Ä–µ–¥–∏.")
            return
    else:
        return

    context.user_data['queue_id'] = queue_id
    context.user_data['user_id'] = user_id

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤)
    info_message = await generate_queue_info_message(conn, queue_id)
    await message.reply_text(info_message)


    if is_user_in_queue(conn, queue_id, user_id):
        await message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å.")
        return

    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if queue["start_time"] > datetime.now(GMT_PLUS_5):
        await message.reply_text(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–Ω–µ—Ç—Å—è *{queue['start_time'].strftime('%d.%m.%Y %H:%M')}* ‚è∞")
        return

    context.user_data["expecting_location_for"] = queue_id
    reply_markup = build_web_app_location_button()

    queue_name = queue['queue_name'] if update.callback_query else get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è")
        return

    sent_message = await message.reply_text(
        f"üìå –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ '{queue_name}', –Ω–∞–∂–º–∏—Ç–µ *–∫–Ω–æ–ø–∫—É* –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç:",
        reply_markup=reply_markup,
        
    )
    context.user_data["location_message_id"] = sent_message.message_id

async def main_menu_buttons(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == "show_queues":
        await show_queues(update, context)
    elif query.data == "change_name":
        await change_name_start(update, context)

async def unknown(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö CallbackQuery."""
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("‚ùå –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!")

async def help_command(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "/start - –ù–∞—á–∞—Ç—å (–≤–≤–æ–¥ –∏–º–µ–Ω–∏)\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å\n"
        "/create_queue - –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/delete_queue - –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/leave - –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/queue_info - –°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/show_queues - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏\n"
        "/create_group - –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/delete_group - –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/show_groups - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø\n"
        "/broadcast - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/delete_broadcast - –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/leave_group - –ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/help - –ü–æ–º–æ—â—å (—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)\n"
    )
    await update.message.reply_text(help_text)

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def set_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞"),
        BotCommand("queue_info", "–°–ø–∏—Å–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏"),
        BotCommand("show_queues", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏"),
        BotCommand("leave", "–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        BotCommand("skip", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥"),
        BotCommand("create_queue", "–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        BotCommand("delete_queue", "–£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("create_group", "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"),
        BotCommand("delete_group", "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"),
        BotCommand("broadcast", "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
        BotCommand("delete_broadcast", "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
        BotCommand("show_groups", "–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã"),
        BotCommand("leave_group", "–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É"),
    ]
    try:
        await app.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

async def start_broadcast(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª).\n"
    )
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not context.user_data.get('broadcast_messages'):
        context.user_data['broadcast_messages'] = []

    if update.message.text == "/end":
        if not context.user_data['broadcast_messages']:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return ConversationHandler.END
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            user_id = update.effective_user.id
            conn = context.bot_data['conn']

            if user_id == ADMIN_ID:
                # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∫–Ω–æ–ø–∫—É "–±–µ–∑ –≥—Ä—É–ø–ø—ã"
                all_groups = get_all_groups(conn)
                reply_markup = build_select_group_menu(all_groups, with_no_group=True)
                await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –≥—Ä—É–ø–ø—ã':", reply_markup=reply_markup)
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç
                user_groups = get_user_groups(conn, user_id)
                if not user_groups:
                    await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
                    return ConversationHandler.END

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (–±–µ–∑ –æ–ø—Ü–∏–∏ "–±–µ–∑ –≥—Ä—É–ø–ø—ã")
                reply_markup = build_select_group_menu(user_groups, with_no_group=False)
                await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=reply_markup)

            return BROADCAST_RECIPIENTS

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    if update.message.text:
        context.user_data['broadcast_messages'].append({"type": "text", "content": update.message.text})
    elif update.message.photo:
        context.user_data['broadcast_messages'].append({"type": "photo", "content": update.message.photo[-1].file_id})
    elif update.message.document:
        context.user_data['broadcast_messages'].append({"type": "document", "content": update.message.document.file_id})

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    return BROADCAST_MESSAGE

async def broadcast_choose_group(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    group_id_str = query.data

    if group_id_str == "select_group_none":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–±–µ–∑ –≥—Ä—É–ø–ø—ã", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        context.user_data['group_id'] = None
        await query.edit_message_text("üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return BROADCAST_RECIPIENTS
    elif group_id_str.startswith("select_group_"):
        try:
            group_id = int(group_id_str.split("_")[2])
            conn = context.bot_data['conn']
            group_name = get_group_by_id(conn, group_id)["group_name"]
            context.user_data['group_id'] = group_id
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ *{group_name}*")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
            return BROADCAST_RECIPIENTS
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã–±–æ—Ä.")
        return BROADCAST_RECIPIENTS

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await query.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú –∏–ª–∏ /now –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–∑—É.")
    return BROADCAST_SCHEDULE

async def broadcast_recipients_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    if user_id == ADMIN_ID:
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        recipients = update.message.text.strip()
        context.user_data['recipients'] = recipients
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú –∏–ª–∏ /now –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–∑—É.")
        return BROADCAST_SCHEDULE
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—Ç—å
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    

async def broadcast_schedule(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    if update.message.text.lower() == "/now":
        send_time = datetime.now(GMT_PLUS_5)
    else:
        try:
            send_time = datetime.strptime(update.message.text.strip(), "%d.%m.%y %H:%M").replace(tzinfo=GMT_PLUS_5)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú –∏–ª–∏ /now.")
            return BROADCAST_SCHEDULE

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if context.user_data.get('group_id'):
        group_id = context.user_data['group_id']
        recipients = ",".join(map(str, get_group_users(conn, group_id)))
    else:
        recipients = context.user_data.get('recipients', '')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    broadcast_id = insert_broadcast(
        conn,
        message_text="\n".join([msg['content'] for msg in context.user_data['broadcast_messages'] if msg['type'] == "text"]),
        message_photo=next((msg['content'] for msg in context.user_data['broadcast_messages'] if msg['type'] == "photo"), None),
        message_document=next((msg['content'] for msg in context.user_data['broadcast_messages'] if msg['type'] == "document"), None),
        recipients=recipients,
        send_time=send_time,
        creator_id=user_id
    )

    if send_time == datetime.now(GMT_PLUS_5):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É
        context.job_queue.run_once(
            send_broadcast,
            0,  # –ó–∞–¥–µ—Ä–∂–∫–∞ 0 —Å–µ–∫—É–Ω–¥ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–∞–∑—É)
            data={
                'broadcast_id': broadcast_id,
                'messages': context.user_data['broadcast_messages'],  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                'recipients': recipients
            }
        )
        await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    else:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        delay = (send_time - datetime.now(GMT_PLUS_5)).total_seconds()
        context.job_queue.run_once(
            send_broadcast,
            delay,
            data={
                'broadcast_id': broadcast_id,
                'messages': context.user_data['broadcast_messages'],  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                'recipients': recipients
            }
        )
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}.")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def send_broadcast(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."""
    conn = context.bot_data['conn']
    data = context.job.data

    broadcast_id = data['broadcast_id']
    messages = data['messages']
    recipients = data.get('recipients', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞
    cursor = conn.cursor()
    cursor.execute("SELECT is_deleted FROM broadcasts WHERE id = ?", (broadcast_id,))
    result = cursor.fetchone()
    if result and result[0]:  # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return

    user_ids = list(map(int, recipients.split(",")))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
    for user_id in user_ids:
        for message in messages:
            try:
                if message['type'] == "text":
                    await context.bot.send_message(chat_id=user_id, text=message['content'])
                elif message['type'] == "photo":
                    await context.bot.send_photo(chat_id=user_id, photo=message['content'])
                elif message['type'] == "document":
                    await context.bot.send_document(chat_id=user_id, document=message['content'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    mark_broadcast_as_deleted(conn, broadcast_id)

async def load_scheduled_broadcasts(job_queue: JobQueue):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    conn = job_queue.application.bot_data['conn']
    broadcasts = get_broadcasts(conn)

    for broadcast in broadcasts:
        broadcast_id, message_text, message_photo, message_document, recipients, send_time_str = broadcast

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞
        cursor = conn.cursor()
        cursor.execute("SELECT is_deleted FROM broadcasts WHERE id = ?", (broadcast_id,))
        result = cursor.fetchone()
        if result and result[0]:  # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
            continue

        send_time = datetime.fromisoformat(send_time_str).replace(tzinfo=GMT_PLUS_5)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if send_time < datetime.now(GMT_PLUS_5):
            mark_broadcast_as_deleted(conn, broadcast_id)
            continue

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
        messages = []
        if message_text:
            messages.append({"type": "text", "content": message_text})
        if message_photo:
            messages.append({"type": "photo", "content": message_photo})
        if message_document:
            messages.append({"type": "document", "content": message_document})

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        delay = (send_time - datetime.now(GMT_PLUS_5)).total_seconds()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ JobQueue
        job_queue.run_once(
            send_broadcast,
            delay,
            data={
                'broadcast_id': broadcast_id,
                'messages': messages,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                'recipients': recipients
            }
        )
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {send_time}.")

async def delete_broadcast_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
    if user_id == ADMIN_ID:
        broadcasts = get_broadcasts(conn)  # –î–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    else:
        broadcasts = get_broadcasts(conn, user_id)  # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∏

    if not broadcasts:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    buttons = []
    for broadcast in broadcasts:
        broadcast_id, message_text, message_photo, message_document, recipients, send_time = broadcast
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if message_text:
            name = " ".join(message_text.split()[:2])  # –ü–µ—Ä–≤—ã–µ 2 —Å–ª–æ–≤–∞ —Ç–µ–∫—Å—Ç–∞
            if len(name) > 16:
                name = name[:16] + "..."
        elif message_photo:
            name = "–§–æ—Ç–æ"
        elif message_document:
            name = "–§–∞–π–ª"
        else:
            name = "–†–∞—Å—Å—ã–ª–∫–∞"
        buttons.append(InlineKeyboardButton(name, callback_data=f"delete_broadcast_{broadcast_id}"))

    reply_markup = InlineKeyboardMarkup([buttons])
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return DELETE_BROADCAST

async def delete_broadcast_confirm(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    broadcast_id = int(query.data.split("_")[2])
    conn = context.bot_data['conn']

    # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    mark_broadcast_as_deleted(conn, broadcast_id)
    await query.edit_message_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    return ConversationHandler.END

async def create_group_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return GROUP_NAME

async def create_group_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    group_name = update.message.text.strip()
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    if not group_name:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return GROUP_NAME

    group_id = insert_group(conn, group_name, user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
    if group_id:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
        keyboard = [[InlineKeyboardButton("üìå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"{JOIN_GROUP_PAYLOAD}{group_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ *{group_name}* —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"‚û° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.",
            reply_markup=reply_markup,
            
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
    return ConversationHandler.END

async def join_group(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ'."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    data_parts = query.data.split("_")

    #–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if len(data_parts) < 3:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    try:
        group_id = int(data_parts[2])
    except ValueError:
         await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
         return

    user_id = update.effective_user.id

    group_name = get_group_name_by_id(conn, group_id)
    if not group_name:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    add_user_to_group(conn, group_id, user_id)
    await query.message.reply_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ '{group_name}'")

async def show_groups(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø."""
    conn = context.bot_data['conn']
    groups = get_all_groups(conn)
    if groups:
        reply_markup = build_group_menu(groups)
        await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.")

async def leave_group_command(update:Update, context:CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—Ö–æ–¥–∞."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    user_groups = get_user_groups(conn,user_id)

    if not user_groups:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        return

    reply_markup = build_leave_group_menu(user_groups)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=reply_markup)

async def leave_group_button(update:Update, context:CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    group_id = int(query.data.split("_")[2])

    group_name = get_group_name_by_id(conn, group_id)
    if not group_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    remove_user_from_group(conn, group_id, user_id)
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã: *{group_name}*.")

async def delete_group_start(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø)."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    if user_id == ADMIN_ID:
        groups_list = get_all_groups(conn)  # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ —Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–ª
        groups_list = [g for g in get_all_groups(conn) if get_group_by_id(conn, g['group_id'])['creator_id'] == user_id]

    if not groups_list:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    reply_markup = build_delete_group_menu(groups_list)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:", reply_markup=reply_markup)

async def delete_group_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    user_id = update.effective_user.id

    try:
        group_id = int(query.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º group_id
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    group = get_group_by_id(conn, group_id)

    if not group:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if user_id != ADMIN_ID and group['creator_id'] != user_id:
        await query.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É.")
        return

    group_name = get_group_name_by_id(conn, group_id)
    if not group_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≥—Ä—É–ø–ø—ã.")
        return

    delete_group_db(conn, group_id)
    await query.edit_message_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ *{group_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
