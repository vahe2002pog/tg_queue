import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LinkPreviewOptions, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler
from datetime import datetime, timedelta
import pytz
from config import MF_COORDINATES, ADMIN_ID
from varibles import *
from db import *
from utils import *
from main_menu import *
from crypto import decrypt_data
logger = logging.getLogger(__name__)

async def create_queue(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    await update.effective_message.reply_text(
        "‚úç *–°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*\n\n"
        "üîπ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏*.\n",
    )
    return QUEUE_NAME

async def create_queue_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    context.user_data['queue_name'] = update.message.text
    await update.message.reply_text(
        f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:* `{update.message.text}`\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–î–î.–ú–ú.–ì–ì_.\n"
        "üìÜ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É*, –≤–≤–µ–¥–∏—Ç–µ /today.\n",
    )
    return QUEUE_DATE

async def create_queue_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ—á–µ—Ä–µ–¥–∏."""
    user_input = update.message.text.strip()
    user_timezone_str = get_user_timezone(conn = context.bot_data['conn'], user_id = update.effective_user.id)

    if user_input == "/today":
        today = datetime.now(pytz.timezone(user_timezone_str)).strftime("%d.%m.%y")
        context.user_data['queue_date'] = today
        await update.message.reply_text(
            f"‚úÖ *–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞:* `{today}` üìÜ\n\n"
            "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ß–ß:–ú–ú_.\n"
            "‚è∞ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è*, –≤–≤–µ–¥–∏—Ç–µ /now.\n",
        )
        return QUEUE_TIME

    if not validate_date(user_input):
        await update.message.reply_text(
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
            "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _–î–î.–ú–ú.–ì–ì_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /today –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.",
        )
        return QUEUE_DATE

    context.user_data['queue_date'] = user_input
    await update.message.reply_text(
        "üìÖ *–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!* ‚úÖ\n\n"
        "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ß–ß:–ú–ú_.\n"
        "‚è∞ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å *—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è*, –≤–≤–µ–¥–∏—Ç–µ /now.\n",
    )
    return QUEUE_TIME
async def create_queue_time(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—á–µ—Ä–µ–¥–∏."""
    user_input = update.message.text.strip()
    user_timezone_str = get_user_timezone(conn = context.bot_data['conn'], user_id = update.effective_user.id)

    if user_input == "/now":
        now_time = datetime.now(pytz.timezone(user_timezone_str)).strftime("%H:%M")
        context.user_data['queue_time'] = now_time
        await update.message.reply_text(
            f"‚úÖ *–í—ã–±—Ä–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* `{now_time}` ‚è∞\n\n")
    else:
        if not validate_time(update.message.text):
            await update.message.reply_text(
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _–ß–ß:–ú–ú_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /now –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
            )
            return QUEUE_TIME

        context.user_data['queue_time'] = update.message.text

    reply_markup = build_location_menu()
    await update.message.reply_text(
        "üåç *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:*",
        reply_markup=reply_markup,
    )
    return CHOOSE_LOCATION

async def create_queue_location(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "location_mathfac":
        context.user_data['latitude'] = MF_COORDINATES[0]
        context.user_data['longitude'] = MF_COORDINATES[1]
        conn = context.bot_data['conn']
        user_id = update.effective_user.id
        user_groups = get_user_groups(conn, user_id)
        reply_markup = build_select_group_menu(user_groups)
        await query.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ (–∏–ª–∏ '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'):", reply_markup=reply_markup)
        return CHOOSE_GROUP

    elif query.data == "location_custom":
        await query.message.edit_text(
            "üìç *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é* –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:")
        return CHOOSE_LOCATION

async def create_queue_location_custom(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    location = update.message.location
    context.user_data['latitude'] = location.latitude
    context.user_data['longitude'] = location.longitude
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    user_groups = get_user_groups(conn, user_id)
    reply_markup = build_select_group_menu(user_groups)
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ (–∏–ª–∏ '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'):", reply_markup=reply_markup)
    return CHOOSE_GROUP

async def create_queue_choose_group(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    group_id_str = query.data

    if group_id_str == "select_group_none":
        context.user_data['group_id'] = None
        await query.edit_message_text("‚úÖ –û—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –±–µ–∑ –≥—Ä—É–ø–ø—ã")

    elif group_id_str.startswith("select_group_"):
        try:
            group_id = int(group_id_str.split("_")[2])
            conn = context.bot_data['conn']
            group_name = get_group_by_id(conn, group_id)["group_name"]
            context.user_data['group_id'] = group_id
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ *{group_name}*")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
            return CHOOSE_GROUP
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã–±–æ—Ä.")
        return CHOOSE_GROUP
    return await create_queue_final(update, context)

async def create_queue_final(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ (—Å –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –±–µ–∑)."""
    name = context.user_data['queue_name']
    date_str = context.user_data['queue_date']
    time_str = context.user_data['queue_time']
    latitude = context.user_data['latitude']
    longitude = context.user_data['longitude']
    group_id = context.user_data.get('group_id')
    conn = context.bot_data['conn']
    user_timezone_str = get_user_timezone(conn = context.bot_data['conn'], user_id = update.effective_user.id)

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UTC
        user_timezone = pytz.timezone(user_timezone_str)
        start_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%y %H:%M")
        start_time_localized = user_timezone.localize(start_time)
        start_time_utc = start_time_localized.astimezone(pytz.UTC)
    except ValueError:
        await update.effective_message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.",
        )
        return ConversationHandler.END

    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤ –ë–î (—Å group_id –∏–ª–∏ NULL)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO queues (queue_name, start_time, latitude, longitude, creator_id, group_id)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (name, start_time_utc.isoformat(), latitude, longitude, update.effective_user.id, group_id))
    conn.commit()
    queue_id = cursor.lastrowid

    location_message = await update.effective_message.reply_location(
        latitude=latitude,
        longitude=longitude
    )
    context.user_data['queue_message_id'] = None #–ü–æ–∫–∞ —á—Ç–æ None
    context.user_data['location_message_id'] = location_message.message_id
    context.user_data['queue_id'] = queue_id

    if group_id:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="send_notification_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="send_notification_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.effective_message.reply_text(
            "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã?",
            reply_markup=reply_markup
        )
        return SEND_NOTIFICATION
    else:
        #–ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç - —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
        await finish_queue_creation(update, context)
        return ConversationHandler.END

async def send_notification_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "send_notification_yes":
        await query.edit_message_text("üîî –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        await send_group_notification(update, context)
    else:
        await query.edit_message_text("üîï –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

    await finish_queue_creation(update, context)
    return ConversationHandler.END

async def send_group_notification(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã —Å –ª–æ–∫–∞—Ü–∏–µ–π."""
    conn = context.bot_data['conn']
    group_id = context.user_data.get('group_id')
    queue_id = context.user_data.get('queue_id')
    queue_creator_id = update.effective_user.id
    queue_name = context.user_data.get('queue_name')
    latitude = context.user_data.get('latitude')
    longitude = context.user_data.get('longitude')

    if not group_id or not queue_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –Ω–µ—Ç group_id –∏–ª–∏ queue_id")
        return

    users = get_group_users(conn, group_id)
    if not users:
        logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ {group_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return

    reply_markup = await create_join_queue_button(context, queue_id, queue_creator_id)

    # –ü–æ–ª—É—á–∞–µ–º start_time –∏–∑ –ë–î (–æ–Ω–æ –≤ UTC)
    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        logger.error(f"–û—á–µ—Ä–µ–¥—å —Å id {queue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    start_time = queue['start_time']

    for user_id in users:
        if user_id != queue_creator_id:
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
                user_timezone_str = get_user_timezone(conn, user_id)

                # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º start_time –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
                start_time_user = convert_time_to_user_timezone(start_time, user_timezone_str)

                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                await context.bot.send_location(
                    chat_id=user_id,
                    latitude=latitude,
                    longitude=longitude
                )

                # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
                message_text = (
                    f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å *{queue_name}*! üïí\n"
                    f"üìÜ –î–∞—Ç–∞: *{start_time_user.strftime('%d.%m.%y')}*\n"
                    f"‚è∞ –í—Ä–µ–º—è: *{start_time_user.strftime('%H:%M')}*\n\n"
                    f"üìç *–õ–æ–∫–∞—Ü–∏—è:* (—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã—à–µ)\n\n"
                    f"‚û° *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!*")

                # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    link_preview_options=LinkPreviewOptions(is_disabled=True)
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ {queue_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id} –æ–± {queue_id}: {e}")

async def finish_queue_creation(update:Update, context:CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —á–∞—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏"""

    #–ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    conn = context.bot_data['conn']
    queue_id = context.user_data.get('queue_id')
    queue_name = context.user_data.get('queue_name')
    date_str = context.user_data['queue_date']
    time_str = context.user_data['queue_time']
    start_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%y %H:%M")
    user_id = update.effective_user.id

    #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    reply_markup = await create_join_queue_button(context, queue_id, user_id)
    #–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    queue_message = await send_queue_created_message(update, context, queue_name, start_time, reply_markup)
    context.user_data['queue_message_id'] = queue_message.message_id #–°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    #–£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤
    user_timezone_str = get_user_timezone(conn, user_id)
    user_timezone = pytz.timezone(user_timezone_str)
    start_time_localized = user_timezone.localize(start_time)
    start_time_utc = start_time_localized.astimezone(pytz.UTC)
    time_until_deletion = (start_time_utc + timedelta(hours=5)) - datetime.now(pytz.UTC)
    seconds_until_deletion = max(time_until_deletion.total_seconds(), 0)
    context.job_queue.run_once(delete_queue_job, seconds_until_deletion, data=queue_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils

    #–ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('queue_name', None)
    context.user_data.pop('group_id', None)


async def handle_deeplink(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deeplink."""
    conn = context.bot_data['conn']
    if update.message:
        message_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

        if not message_text.startswith("/start") or len(message_text.split()) <= 1:
            await start(update, context)
            return

        payload = message_text.split()[1]
        if payload.startswith(JOIN_QUEUE_PAYLOAD):
            try:
                encrypted_id = payload[11:]
                queue_id, creator_id = decrypt_data(encrypted_id)
                if not queue_id or not creator_id:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—á–µ—Ä–µ–¥–∏.")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—á–µ—Ä–µ–¥–∏.")
                return

            user_id = update.effective_user.id
            queue = await get_queue_by_id(conn, queue_id)
            if not queue:
                await update.message.reply_text("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if queue['creator_id'] != creator_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ—á–µ—Ä–µ–¥–∏.")
                return

            if not get_user_data(conn, user_id):
                await update.message.reply_text(
                    "‚úç –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
                return

            context.user_data['queue_id'] = queue_id
            context.user_data['user_id'] = user_id
            await ask_location(update, context)

async def delete_queue_job(context: CallbackContext) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
    queue_id = context.job.data
    conn = context.bot_data['conn']
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏ —Å ID {queue_id}")
        return

    delete_queue(conn, queue_id)
    await context.bot.send_message(ADMIN_ID, f"‚úÖ –û—á–µ—Ä–µ–¥—å {queue_name} (ID {queue_id}) –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.")
    logger.info(f"–û—á–µ—Ä–µ–¥—å {queue_name} (ID {queue_id}) –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.")

async def delete_queue_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    queue_id = int(query.data.split("_")[2])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_queue_{queue_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_delete_queue_{queue_id}")]
    ]
    print(queue_id)
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:", reply_markup=reply_markup)

async def confirm_delete_queue(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    queue_id = int(query.data.split("_")[3])

    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    delete_queue(conn, queue_id)
    await query.edit_message_text(f"‚úÖ –û—á–µ—Ä–µ–¥—å *{queue_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    context.user_data['chat_id'] = query.message.chat_id
    context.user_data['edit_message'] = False
    await show_queues(update, context)

async def cancel_delete_queue(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    queue_id = None
    # –ò–∑–≤–ª–µ–∫–∞–µ–º queue_id –∏–∑ query.data
    try:
        queue_id = int(query.data.split("_")[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º queue_id –∏–∑ "cancel_delete_queue_{queue_id}"
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    conn = context.bot_data['conn']
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏
    await queue_info_button(update, context)

async def leave_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    queue_id = int(query.data.split("_")[2])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_leave_queue_{queue_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_leave_queue_{queue_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏:", reply_markup=reply_markup)

async def confirm_leave_queue(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    queue_id = int(query.data.split("_")[3])

    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    remove_user_from_queue(conn, queue_id, user_id)
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: *{queue_name}*.")

    context.user_data['chat_id'] = query.message.chat_id
    context.user_data['edit_message'] = False
    await show_queues(update, context)

async def cancel_leave_queue(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()

    try:
        queue_id = int(query.data.split("_")[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º queue_id –∏–∑ "cancel_leave_queue_{queue_id}"
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    conn = context.bot_data['conn']
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    await queue_info_button(update, context)

async def skip_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    queue_id = int(query.data.split("_")[1])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_skip_{queue_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_skip_{queue_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞:", reply_markup=reply_markup)

async def confirm_skip(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    queue_id = int(query.data.split("_")[2])

    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    queue_users_ids = get_queue_users_ids(conn, queue_id)
    if not queue_users_ids:
        await query.edit_message_text("üîç –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    current_index = queue_users_ids.index(user_id)

    if current_index + 1 < len(queue_users_ids):
        user1_id = queue_users_ids[current_index]
        user2_id = queue_users_ids[current_index + 1]
        swap_queue_users(conn, queue_id, user1_id, user2_id)
        user_name = get_user_name(conn, user1_id)
        user2_name = get_user_name(conn, user2_id)

        if user2_name:
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥. –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ *{user2_name}*.")
            await context.bot.send_message(chat_id=user2_id, text=f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –ø–µ—Ä–µ–¥ *{user_name}* –≤ '{queue_name}'.")
        else:
            await query.edit_message_text("‚úÖ –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥.")

        context.user_data['queue_id'] = queue_id
        context.user_data['chat_id'] = query.message.chat_id
        context.user_data['edit_message'] = False 
        await queue_info_button(update, context)

    else:
        await query.edit_message_text("‚ùå –í—ã –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

async def cancel_skip(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()

    try:
        queue_id = int(query.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º queue_id –∏–∑ "cancel_skip_{queue_id}"
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    conn = context.bot_data['conn']
    queue_name = get_queue_name_by_id(conn, queue_id)

    if not queue_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    await queue_info_button(update, context)

async def queue_info_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    queue_id = None
    if queue_id is None:
        if query and (query.data.startswith("queue_info_") or query.data.startswith("cancel_skip_") 
                      or query.data.startswith("cancel_delete_queue_") or query.data.startswith("cancel_leave_queue_")):
            if query.data.startswith("cancel_delete_queue_") or query.data.startswith("cancel_leave_queue_"):
                queue_id = int(query.data.split("_")[3])
                print(queue_id)
            else:
                queue_id = int(query.data.split("_")[2])
        else:
            if query:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    user_id = update.effective_user.id
    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    users_list = get_queue_users_names(conn, queue_id)
    users_text = "\n".join([f"{i+1}. {user}" for i, user in enumerate(users_list)]) if users_list else "üîç –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    keyboard = []
    if is_user_in_queue(conn, queue_id, user_id):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        keyboard.append([
            InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥", callback_data=f"skip_{queue_id}"),
            InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"leave_queue_{queue_id}")
        ])
    else:
        keyboard.append([InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"{JOIN_QUEUE_PAYLOAD}{queue_id}")])

    if queue['creator_id'] == user_id or user_id == ADMIN_ID:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=f"delete_queue_{queue_id}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_queues")])

    reply_markup = InlineKeyboardMarkup(keyboard) 

    await query.edit_message_text(
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ {queue['queue_name']}:\n\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{users_text}",
        reply_markup=reply_markup
    )

async def show_queues(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    query = update.callback_query  # –ü–æ–ª—É—á–∞–µ–º query

    chat_id = context.user_data.get('chat_id')
    if not chat_id:
        if update.message:
            chat_id = update.message.chat_id
        elif update.callback_query:
            chat_id = update.callback_query.message.chat_id
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –≤ show_queues")
            return

    # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
    queues_list = get_user_queues(conn, user_id)
    if user_id == ADMIN_ID:
        queues_list = get_all_queues(conn)

    buttons = [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="create_queue")]
    buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))

    if queues_list:
        for queue in reversed(queues_list):
            buttons.insert(0, InlineKeyboardButton(queue['queue_name'], callback_data=f"queue_info_{queue['queue_id']}"))
        menu = build_menu(buttons, n_cols=1)
        reply_markup = InlineKeyboardMarkup(menu)
    else:
        menu = build_menu(buttons, n_cols=1)
        reply_markup = InlineKeyboardMarkup(menu)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥, –ò –µ—Å–ª–∏ –µ—Å—Ç—å query
    if context.user_data.get('edit_message') and query:
        await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup)
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å:", reply_markup=reply_markup)

async def handle_web_app_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Web App (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)."""
    import json
    conn = context.bot_data['conn']
    user_id = context.user_data.get("user_id")
    user_timezone_str = get_user_timezone(conn, user_id)
    user_timezone = pytz.timezone(user_timezone_str)

    queue_id = context.user_data.get("queue_id")
    queue = await get_queue_by_id(conn, queue_id)
    queue_start_time = queue["start_time"].astimezone(user_timezone)

    if queue_start_time > datetime.now(user_timezone):
        await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–Ω–µ—Ç—Å—è *{queue_start_time.strftime('%d.%m.%Y %H:%M')}* ‚è∞")
        return
    try:
        data = json.loads(update.message.web_app_data.data)
        lat = data.get("lat")
        lon = data.get("lon")

        if not lat or not lon:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.", reply_markup=ReplyKeyboardRemove())
            return

        if not queue_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å.", reply_markup=ReplyKeyboardRemove())
            return

        await check_distance_and_join(update, context, queue_id, user_id, lat, lon) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=ReplyKeyboardRemove())

async def ask_location(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = context.bot_data['conn']

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (CallbackQuery –∏–ª–∏ Message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
        data_parts = query.data.split("_")
        if len(data_parts) < 3 or not data_parts[2].isdigit():
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        queue_id = int(data_parts[2])
        user_id = update.effective_user.id

    elif update.message:
        message = update.message
        queue_id = context.user_data.get("queue_id")
        user_id = message.from_user.id
        if not queue_id:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω ID –æ—á–µ—Ä–µ–¥–∏.")
            return
    else:
        return

    context.user_data['queue_id'] = queue_id
    context.user_data['user_id'] = user_id

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤)
    user_timezone_str = get_user_timezone(conn, user_id)
    info_message = await generate_queue_info_message(conn, queue_id, user_timezone_str)
    await message.reply_text(info_message)


    if is_user_in_queue(conn, queue_id, user_id):
        await message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å.")
        return

    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_timezone_str = get_user_timezone(conn, user_id)
    user_timezone = pytz.timezone(user_timezone_str)
    queue_start_time = queue["start_time"].astimezone(user_timezone)

    if queue_start_time > datetime.now(user_timezone):
        await message.reply_text(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–Ω–µ—Ç—Å—è *{queue_start_time.strftime('%d.%m.%Y %H:%M')}* ‚è∞")
        return

    context.user_data["expecting_location_for"] = queue_id
    reply_markup = build_web_app_location_button()

    queue_name = queue['queue_name'] if update.callback_query else get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è")
        return

    sent_message = await message.reply_text(
        f"üìå –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ '{queue_name}', –Ω–∞–∂–º–∏—Ç–µ *–∫–Ω–æ–ø–∫—É* –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç:",
        reply_markup=reply_markup,

    )
    context.user_data["location_message_id"] = sent_message.message_id