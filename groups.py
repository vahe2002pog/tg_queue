# groups.py
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, ConversationHandler
from config import ADMIN_ID
from varibles import GROUP_NAME
from db import *
from utils import *
logger = logging.getLogger(__name__)

async def create_group(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    await update.effective_message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return GROUP_NAME

# groups.py (–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π create_group_name)
async def create_group_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    group_name = update.message.text.strip()
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    if not group_name:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return GROUP_NAME

    group_id = insert_group(conn, group_name, user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
    if group_id:
        deeplink = f"https://t.me/{context.bot.username}?start=join_group_{group_id}"
        keyboard = [[InlineKeyboardButton("üìå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", url=deeplink)]]
        reply_markup = InlineKeyboardMarkup(keyboard)


        await update.message.reply_text(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ *{group_name}* —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"‚û° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.",
            reply_markup=reply_markup,

        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
    return ConversationHandler.END

async def handle_group_deeplink(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç deeplink –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ."""
    conn = context.bot_data['conn']

    if update.message:
      message_text = update.message.text
      if not message_text.startswith("/start") or len(message_text.split()) <= 1:
          return  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ deeplink, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

      payload = message_text.split()[1]
      if payload.startswith("join_group_"):
          try:
              group_id = int(payload[11:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º group_id
          except ValueError:
              await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã.")
              return

          user_id = update.effective_user.id

          group_name = get_group_name_by_id(conn, group_id)
          if not group_name:
              await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
              return

          if not get_user_data(conn, user_id):
                await update.message.reply_text(
                    "üìå –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",

                )
                return
          add_user_to_group(conn, group_id, user_id)
          await update.message.reply_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ '{group_name}'")
    elif update.callback_query:
      pass

async def join_group(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ'."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    data_parts = query.data.split("_")

    #–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if len(data_parts) < 3:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    try:
        group_id = int(data_parts[2])
    except ValueError:
         await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
         return

    user_id = update.effective_user.id

    group_name = get_group_name_by_id(conn, group_id)
    if not group_name:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    add_user_to_group(conn, group_id, user_id)
    await query.message.reply_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ '{group_name}'")


async def show_groups(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    query = update.callback_query

    # chat_id –ø–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ edit_message = False
    chat_id = context.user_data.get('chat_id')
    if not chat_id:
        if update.message:
            chat_id = update.message.chat_id
        elif update.callback_query:
            chat_id = update.callback_query.message.chat_id
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –≤ show_groups")
            return

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_groups = get_user_groups(conn, user_id)
    if user_id == ADMIN_ID:
        user_groups = get_all_groups(conn)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons=[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group")]
    buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))

    if user_groups:
        for group in reversed(user_groups):
            buttons.insert(0, InlineKeyboardButton(group['group_name'], callback_data=f"group_info_{group['group_id']}"))
        reply_markup = InlineKeyboardMarkup(build_menu(buttons, n_cols=1))
    else:
        reply_markup = InlineKeyboardMarkup(build_menu(buttons, n_cols=1))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥, –ò –µ—Å–ª–∏ –µ—Å—Ç—å query
    if context.user_data.get('edit_message') and query:
        await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)

async def leave_group_command(update:Update, context:CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—Ö–æ–¥–∞."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    user_groups = get_user_groups(conn,user_id)

    if not user_groups:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        return

    reply_markup = build_leave_group_menu(user_groups) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=reply_markup)

async def leave_group_button(update:Update, context:CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    group_id = int(query.data.split("_")[2])

    group_name = get_group_name_by_id(conn, group_id)
    if not group_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏.")
        return

    remove_user_from_group(conn, group_id, user_id)
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã: *{group_name}*.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ edit_message –≤ False –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
    context.user_data['chat_id'] = query.message.chat_id
    context.user_data['edit_message'] = False
    await show_groups(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º update –∏ context


async def delete_group_start(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø)."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    if user_id == ADMIN_ID:
        groups_list = get_all_groups(conn)  # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ —Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–ª
        groups_list = [g for g in get_all_groups(conn) if get_group_by_id(conn, g['group_id'])['creator_id'] == user_id]

    if not groups_list:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    reply_markup = build_delete_group_menu(groups_list)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:", reply_markup=reply_markup)

async def delete_group_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']

    user_id = update.effective_user.id
    try:
        group_id = int(query.data.split("_")[2])
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return

    group = get_group_by_id(conn, group_id)
    if not group:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if user_id != ADMIN_ID and group['creator_id'] != user_id:
         await query.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É.")
         return

    group_name = get_group_name_by_id(conn, group_id)
    if not group_name:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≥—Ä—É–ø–ø—ã.")
        return

    delete_group_db(conn, group_id)
    await query.edit_message_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ *{group_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ edit_message –≤ False –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
    context.user_data['chat_id'] = query.message.chat_id
    context.user_data['edit_message'] = False
    await show_groups(update, context) # –ü–µ—Ä–µ–¥–∞–µ–º update –∏ context

async def group_info_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    group_id = int(query.data.split("_")[2])

    user_id = update.effective_user.id
    group = get_group_by_id(conn, group_id)
    if not group:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    users_list = get_group_users(conn, group_id)
    users_text = "\n".join([f"{i+1}. {get_user_name(conn, user_id)}" for i, user_id in enumerate(users_list)]) if users_list else "üîç –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    if is_user_in_group(conn, group_id, user_id):
        buttons.append(InlineKeyboardButton("üö™ –ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"leave_group_{group_id}"))
    else:
        buttons.append(InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_group_{group_id}"))

    if group['creator_id'] == user_id or user_id == ADMIN_ID:
        buttons.append(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"delete_group_{group_id}"))

    buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_groups"))
    
    reply_markup = InlineKeyboardMarkup(build_menu(buttons, n_cols=2))

    await query.edit_message_text(
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {group['group_name']}:\n\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{users_text}",
        reply_markup=reply_markup
    )