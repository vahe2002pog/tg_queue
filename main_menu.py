import logging
from telegram import Update, BotCommand, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler

from config import ADMIN_USER_ID
from varibles import *
from db import get_user_data, set_user_name, update_user_name, update_user_state
from utils import *
from groups import *
from broadcasts import *
from queues import *

logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']
    query = update.callback_query

    result = get_user_data(conn, user_id)
    if result:
        reply_markup = build_main_menu()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if context.user_data.get('edit_message') and query:
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            context.user_data['edit_message'] = False
        else:
            # –ï—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.message:
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            elif query:
                await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        return ConversationHandler.END
    else:
        if update.message:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")
        elif update.callback_query:
            await update.callback_query.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start.")
            return ConversationHandler.END

        context.user_data['state'] = WAITING_FOR_NAME
        context.user_data['time_zone'] = GMT_PLUS_5 #–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        return WAITING_FOR_NAME

async def set_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    user_name = update.message.text
    conn = context.bot_data['conn']
    time_zone = GMT_PLUS_5

    set_user_name(conn, user_id, user_name, time_zone)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –∏–º—è *{user_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    reply_markup = build_main_menu()
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
    return ConversationHandler.END

async def change_name_start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏."""
    await update.callback_query.message.reply_text("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–∏–º—è*:")
    return CHANGE_NAME

async def change_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏."""
    user = update.message.from_user
    user_id = user.id
    new_name = update.message.text
    conn = context.bot_data['conn']

    update_user_name(conn, user_id, new_name)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{new_name}*.")
    update_user_state(conn, user_id, "name_entered")

    reply_markup = build_main_menu()
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def help_command(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî {ADMIN_USER_ID}\n"
    )
    await update.effective_message.reply_text(help_text, parse_mode=None)

async def set_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
    ]
    try:
        await app.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

async def unknown(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö CallbackQuery."""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("‚ùå –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!")
    else:
         await update.message.reply_text("‚ùå –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!")

async def back_to_main_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = build_main_menu()
    await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

async def main_menu_buttons(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    if query.data == "show_queues":
        context.user_data['edit_message'] = True
        await show_queues(update, context)
    elif query.data == "show_groups":
        context.user_data['edit_message'] = True
        await show_groups(update, context)
    elif query.data == "show_broadcasts":
        context.user_data['edit_message'] = True
        await show_broadcasts(update, context)
    elif query.data == "change_name":
        await change_name_start(update, context)
    elif query.data == "help":
        await help_command(update, context)
    elif query.data == "main_menu":
        context.user_data['edit_message'] = True
        await start(update, context)
