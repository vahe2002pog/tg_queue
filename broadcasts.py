import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, ConversationHandler, JobQueue
from datetime import datetime
import pytz
from config import ADMIN_ID
from varibles import BROADCAST_MESSAGE, BROADCAST_RECIPIENTS, BROADCAST_SCHEDULE
from db import *
from utils import build_menu, build_select_group_menu

logger = logging.getLogger(__name__)

async def show_broadcasts(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id
    query = update.callback_query

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ context.user_data
    chat_id = context.user_data.get('chat_id')

    # –ï—Å–ª–∏ chat_id –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ update
    if not chat_id:
        if update.message:
            chat_id = update.message.chat_id
        elif update.callback_query:
            chat_id = update.callback_query.message.chat_id
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –≤ show_broadcasts")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    broadcasts = get_broadcasts(conn, user_id)
    if user_id == ADMIN_ID:
        broadcasts = get_broadcasts(conn)  # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" –∏ "–ù–∞–∑–∞–¥"
    buttons = [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")]
    buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))

    if broadcasts:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        for broadcast in reversed(broadcasts):
            broadcast_id, message_text, message_photo, message_document, recipients, send_time = broadcast
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            if message_text:
                name = " ".join(message_text.split()[:2])
                if len(name) > 16:
                    name = name[:16] + "..."
            elif message_photo:
                name = "–§–æ—Ç–æ"
            elif message_document:
                name = "–§–∞–π–ª"
            else:
                name = "–†–∞—Å—Å—ã–ª–∫–∞"
            buttons.insert(0, InlineKeyboardButton(name, callback_data=f"broadcast_info_{broadcast_id}"))

        menu = build_menu(buttons, n_cols=1)
        reply_markup = InlineKeyboardMarkup(menu)
    else:
        menu = build_menu(buttons, n_cols=1)
        reply_markup = InlineKeyboardMarkup(menu)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞
    if context.user_data.get('edit_message') and query:
        await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=reply_markup)

async def broadcast_info_button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å—ã–ª–∫–µ."""
    query = update.callback_query
    await query.answer()
    conn = context.bot_data['conn']
    broadcast_id = int(query.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    broadcast = get_broadcast_by_id(conn, broadcast_id)
    if not broadcast:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    cursor = conn.cursor()
    cursor.execute("SELECT send_time FROM broadcasts WHERE id = ?", (broadcast_id,))
    send_time_result = cursor.fetchone()
    send_time = datetime.fromisoformat(send_time_result[0]).strftime("%d.%m.%Y %H:%M") if send_time_result else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = broadcast.get("message_text", "")
    message_photo = broadcast.get("message_photo", "")
    message_document = broadcast.get("message_document", "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    info_text = f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ:*\n\n"
    if message_text:
        info_text += f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{message_text}\n\n"
    if message_photo:
        info_text += "üñº *–§–æ—Ç–æ:* –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n\n"
    if message_document:
        info_text += "üìÑ *–î–æ–∫—É–º–µ–Ω—Ç:* –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n\n"
    info_text += f"‚è∞ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {send_time}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_broadcast_{broadcast_id}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_broadcasts")
    ]
    reply_markup = InlineKeyboardMarkup(build_menu(buttons, n_cols=1))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode="Markdown")

async def create_broadcast(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await update.effective_message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª).\n"
    )
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not context.user_data.get('broadcast_messages'):
        context.user_data['broadcast_messages'] = []

    if update.message.text == "/end":
        if not context.user_data['broadcast_messages']:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return ConversationHandler.END
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            user_id = update.effective_user.id
            conn = context.bot_data['conn']

            if user_id == ADMIN_ID:
                # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∫–Ω–æ–ø–∫—É "–±–µ–∑ –≥—Ä—É–ø–ø—ã"
                all_groups = get_all_groups(conn)
                reply_markup = build_select_group_menu(all_groups, with_no_group=True)
                await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –≥—Ä—É–ø–ø—ã':", reply_markup=reply_markup)
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç
                user_groups = get_user_groups(conn, user_id)
                if not user_groups:
                    await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
                    return ConversationHandler.END

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (–±–µ–∑ –æ–ø—Ü–∏–∏ "–±–µ–∑ –≥—Ä—É–ø–ø—ã")
                reply_markup = build_select_group_menu(user_groups, with_no_group=False)
                await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=reply_markup)

            return BROADCAST_RECIPIENTS

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    if update.message.text:
        context.user_data['broadcast_messages'].append({"type": "text", "content": update.message.text})
    elif update.message.photo:
        context.user_data['broadcast_messages'].append({"type": "photo", "content": update.message.photo[-1].file_id})
    elif update.message.document:
        context.user_data['broadcast_messages'].append({"type": "document", "content": update.message.document.file_id})

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    return BROADCAST_MESSAGE

async def broadcast_choose_group(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    group_id_str = query.data

    if group_id_str == "select_group_none":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–±–µ–∑ –≥—Ä—É–ø–ø—ã", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        context.user_data['group_id'] = None
        await query.edit_message_text("üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return BROADCAST_RECIPIENTS
    elif group_id_str.startswith("select_group_"):
        try:
            group_id = int(group_id_str.split("_")[2])
            conn = context.bot_data['conn']
            group_name = get_group_by_id(conn, group_id)["group_name"]
            context.user_data['group_id'] = group_id
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ *{group_name}*")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
            return BROADCAST_RECIPIENTS
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã–±–æ—Ä.")
        return BROADCAST_RECIPIENTS

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await query.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú –∏–ª–∏ /now –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–∑—É.")
    return BROADCAST_SCHEDULE

async def broadcast_recipients_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    conn = context.bot_data['conn']

    if user_id == ADMIN_ID:
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        recipients = update.message.text.strip()
        context.user_data['recipients'] = recipients
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú –∏–ª–∏ /now –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–∑—É.")
        return BROADCAST_SCHEDULE
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—Ç—å
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    

async def broadcast_schedule(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    conn = context.bot_data['conn']
    user_id = update.effective_user.id

    if update.message.text.lower() == "/now":
        send_time = datetime.now(pytz.UTC)
        send_time_utc = send_time  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º send_time_utc
    else:
        try:
            user_timezone_str = get_user_timezone(conn, user_id)
            user_timezone = pytz.timezone(user_timezone_str)
            send_time = datetime.strptime(update.message.text.strip(), "%d.%m.%y %H:%M")
            send_time_localized = user_timezone.localize(send_time)
            send_time_utc = send_time_localized.astimezone(pytz.UTC)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú –∏–ª–∏ /now.")
            return BROADCAST_SCHEDULE

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if context.user_data.get('group_id'):
        group_id = context.user_data['group_id']
        recipients = ",".join(map(str, get_group_users(conn, group_id)))
    else:
        recipients = context.user_data.get('recipients', '')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    broadcast_id = insert_broadcast(
        conn,
        message_text="\n".join([msg['content'] for msg in context.user_data['broadcast_messages'] if msg['type'] == "text"]),
        message_photo=next((msg['content'] for msg in context.user_data['broadcast_messages'] if msg['type'] == "photo"), None),
        message_document=next((msg['content'] for msg in context.user_data['broadcast_messages'] if msg['type'] == "document"), None),
        recipients=recipients,
        send_time=send_time,
        creator_id=user_id
    )

    if send_time == datetime.now(pytz.UTC):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É
        context.job_queue.run_once(
            send_broadcast,
            0,  # –ó–∞–¥–µ—Ä–∂–∫–∞ 0 —Å–µ–∫—É–Ω–¥ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–∞–∑—É)
            data={
                'broadcast_id': broadcast_id,
                'messages': context.user_data['broadcast_messages'],  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                'recipients': recipients
            }
        )
        await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    else:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        delay = (send_time_utc - datetime.now(pytz.UTC)).total_seconds()
        context.job_queue.run_once(
            send_broadcast,
            delay,
            data={
                'broadcast_id': broadcast_id,
                'messages': context.user_data['broadcast_messages'],  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                'recipients': recipients
            }
        )
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}.")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def send_broadcast(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."""
    conn = context.bot_data['conn']
    data = context.job.data

    broadcast_id = data['broadcast_id']
    messages = data['messages']
    recipients = data.get('recipients', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞
    cursor = conn.cursor()
    cursor.execute("SELECT is_deleted FROM broadcasts WHERE id = ?", (broadcast_id,))
    result = cursor.fetchone()
    if result and result[0]:  # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return

    user_ids = list(map(int, recipients.split(",")))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
    for user_id in user_ids:
        for message in messages:
            try:
                if message['type'] == "text":
                    await context.bot.send_message(chat_id=user_id, text=message['content'])
                elif message['type'] == "photo":
                    await context.bot.send_photo(chat_id=user_id, photo=message['content'])
                elif message['type'] == "document":
                    await context.bot.send_document(chat_id=user_id, document=message['content'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    mark_broadcast_as_deleted(conn, broadcast_id)

async def load_scheduled_broadcasts(job_queue: JobQueue):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    conn = job_queue.application.bot_data['conn']
    broadcasts = get_broadcasts(conn)

    for broadcast in broadcasts:
        broadcast_id, message_text, message_photo, message_document, recipients, send_time_str = broadcast

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞
        cursor = conn.cursor()
        cursor.execute("SELECT is_deleted FROM broadcasts WHERE id = ?", (broadcast_id,))
        result = cursor.fetchone()
        if result and result[0]:  # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
            continue

        send_time = datetime.fromisoformat(send_time_str).replace(tzinfo=pytz.UTC)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if send_time < datetime.now(pytz.UTC):
            mark_broadcast_as_deleted(conn, broadcast_id)
            continue

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
        messages = []
        if message_text:
            messages.append({"type": "text", "content": message_text})
        if message_photo:
            messages.append({"type": "photo", "content": message_photo})
        if message_document:
            messages.append({"type": "document", "content": message_document})

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        delay = (send_time - datetime.now(pytz.UTC)).total_seconds()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ JobQueue
        job_queue.run_once(
            send_broadcast,
            delay,
            data={
                'broadcast_id': broadcast_id,
                'messages': messages,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                'recipients': recipients
            }
        )
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {send_time}.")

async def cancel_broadcast_button(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    broadcast_id = int(query.data.split("_")[2])
    conn = context.bot_data['conn']

    # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    mark_broadcast_as_deleted(conn, broadcast_id)
    await query.edit_message_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ context.user_data –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data['chat_id'] = query.message.chat_id
    context.user_data['edit_message'] = False
    await show_broadcasts(update, context)

    return ConversationHandler.END