import pytz
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, ReplyKeyboardRemove, LinkPreviewOptions, Update
from telegram.ext import CallbackContext
from datetime import datetime
from geopy.distance import geodesic
from db import get_queue_by_id, get_queue_name_by_id, add_user_to_queue, get_queue_users_names, get_queue_users_ids, get_user_name, get_user_timezone
from config import GET_LOCATION_URL
from varibles import MAX_DISTANCE, JOIN_GROUP_PAYLOAD, JOIN_QUEUE_PAYLOAD, RUSSIAN_TIMEZONES
from crypto import encrypt_data
from timezonefinder import TimezoneFinder

logger = logging.getLogger(__name__)

async def send_notification(user_id: int, message: str, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await context.bot.send_message(user_id, message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def build_menu(buttons, n_cols=1, header_buttons=None, footer_buttons=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∏–∑ –∫–Ω–æ–ø–æ–∫."""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu

def build_location_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    buttons = [
        InlineKeyboardButton("üèõ –ú–∞—Ç–§–∞–∫", callback_data="location_mathfac"),
        InlineKeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="location_custom")
    ]
    return InlineKeyboardMarkup(build_menu(buttons)) 

def validate_date(date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã."""
    try:
        datetime.strptime(date_str, "%d.%m.%y")
        return True
    except ValueError:
        return False

def validate_time(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

async def check_distance_and_join(update, context, queue_id, user_id, lat, lon):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å."""
    conn = context.bot_data['conn']
    queue = await get_queue_by_id(context.bot_data['conn'], queue_id)
    if not queue:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return

    target_coordinates = (queue["latitude"], queue["longitude"])
    user_coord = (lat, lon)
    distance = geodesic(user_coord, target_coordinates).meters
    location_message = await update.effective_message.reply_location(
        latitude=lat,
        longitude=lon,
        reply_markup=None
        )
    context.user_data['location_message_id'] = location_message.message_id

    if distance <= MAX_DISTANCE:
        user_timezone_str = get_user_timezone(conn, user_id)
        user_timezone = pytz.timezone(user_timezone_str)
        join_time = datetime.now(user_timezone).isoformat()
        add_user_to_queue(context.bot_data['conn'], queue_id, user_id, join_time)  # Corrected
        await update.message.reply_text(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å {queue['queue_name']}.", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å.", reply_markup=ReplyKeyboardRemove())

async def create_join_queue_button(context, queue_id, creator_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏' —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º ID."""
    encrypted_id = encrypt_data(queue_id, creator_id)
    deeplink = f"https://t.me/{context.bot.username}?start={JOIN_QUEUE_PAYLOAD}{encrypted_id}"
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏", url=deeplink)]])

async def create_join_group_button(context, group_id, creator_id):
    encrypted_id = encrypt_data(group_id, creator_id)
    deeplink = f"https://t.me/{context.bot.username}?start={JOIN_GROUP_PAYLOAD}{encrypted_id}"
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", url=deeplink)]])

async def send_queue_created_message(update, context, queue_name, start_time, reply_markup):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏."""
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_timezone_str = get_user_timezone(conn = context.bot_data['conn'], user_id = update.effective_user.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message = await update.effective_message.reply_text(
        f"‚úÖ –û—á–µ—Ä–µ–¥—å *{queue_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üïí\n"
        f"üìÜ –î–∞—Ç–∞: *{start_time.strftime('%d.%m.%y')}*\n"
        f"‚è∞ –í—Ä–µ–º—è: *{start_time.strftime('%H:%M')}*\n\n"
        f"‚û° *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!*",
        reply_markup=reply_markup,
        link_preview_options=LinkPreviewOptions(is_disabled=True)
    )
    return message

def build_queues_menu(queues_list):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—á–µ—Ä–µ–¥–µ–π."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"{JOIN_QUEUE_PAYLOAD}{queue['queue_id']}") for queue in queues_list]
    return InlineKeyboardMarkup(build_menu(buttons))

def build_skip_turn_menu(user_queues):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"skip_{queue['queue_id']}") for queue in user_queues]
    return InlineKeyboardMarkup(build_menu(buttons))

def build_queue_info_menu(user_queues):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"info_{queue['queue_id']}") for queue in user_queues]
    return InlineKeyboardMarkup(build_menu(buttons))

async def generate_queue_info_message(conn, queue_id: int, user_timezone_str: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    queue_name = get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏."

    queue = await get_queue_by_id(conn, queue_id)
    if not queue:
        return "‚ùå –û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    start_time = queue['start_time']
    if start_time:
        start_time = convert_time_to_user_timezone(start_time, user_timezone_str)
        start_time_str = start_time.strftime("%d.%m.%y %H:%M")
    else:
        start_time_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    users_list = get_queue_users_names(conn, queue_id)
    if not users_list:
        return f"üîç –í –æ—á–µ—Ä–µ–¥–∏ {queue_name} –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time_str}"

    users_text = ""
    queue_users_ids = get_queue_users_ids(conn, queue_id)

    for i, user_id in enumerate(queue_users_ids):
        user_name = get_user_name(conn, user_id)
        users_text += f"{i+1}. {user_name if user_name else '(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)'}\n"

    return f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏ {queue_name} (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time_str}):\n{users_text}"

def build_web_app_location_button(rec_source):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Web App."""
    url = f"{GET_LOCATION_URL}?rec_source={rec_source}"
    keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", web_app=WebAppInfo(url=url))]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def build_group_menu(groups: list[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø."""
    buttons = [InlineKeyboardButton(group['group_name'], callback_data=f"{JOIN_GROUP_PAYLOAD}{group['group_id']}") for group in groups]
    return InlineKeyboardMarkup(build_menu(buttons))

def build_select_group_menu(groups: list[dict], with_no_group: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏."""
    buttons = []
    if with_no_group:
        buttons.append(InlineKeyboardButton("–ë–µ–∑ –≥—Ä—É–ø–ø—ã", callback_data="select_group_none"))
    buttons.extend([InlineKeyboardButton(group['group_name'], callback_data=f"select_group_{group['group_id']}") for group in groups])
    return InlineKeyboardMarkup(build_menu(buttons))

def build_leave_group_menu(user_groups: list[dict])-> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø."""
    buttons = [InlineKeyboardButton(group['group_name'], callback_data=f"leave_group_{group['group_id']}") for group in user_groups]
    return InlineKeyboardMarkup(build_menu(buttons))

def build_delete_group_menu(groups: list[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø."""
    buttons = [InlineKeyboardButton(group['group_name'], callback_data=f"delete_group_{group['group_id']}") for group in groups]
    return InlineKeyboardMarkup(build_menu(buttons))

def convert_time_to_user_timezone(server_time: datetime, user_timezone_str: str) -> datetime:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ UTC –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_timezone = pytz.timezone(user_timezone_str)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–π–º–∑–æ–Ω–∞ —É server_time
    if server_time.tzinfo is None:
        server_time = pytz.UTC.localize(server_time)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º UTC
    else:
        server_time = server_time.astimezone(pytz.UTC)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–∑–æ–Ω–∞
    
    return server_time.astimezone(user_timezone)

def build_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = [
        InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥–∏", callback_data="show_queues"),
        InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="show_groups"),
        InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="show_broadcasts"),
        InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name"),
        InlineKeyboardButton("üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="select_timezone"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    ]
    return InlineKeyboardMarkup(build_menu(buttons, n_cols=2))

def error_handler(update: object, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def get_all_timezones():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤."""
    return pytz.all_timezones

def get_timezone_by_location(lat, lon):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."""
    tf = TimezoneFinder()
    return tf.timezone_at(lng=lon, lat=lat)

def build_russian_timezone_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –†–æ—Å—Å–∏–∏."""
    buttons = [InlineKeyboardButton(tz_name, callback_data=f"select_tz_{tz_code}") for tz_name, tz_code in RUSSIAN_TIMEZONES.items()]
    buttons.append(InlineKeyboardButton("üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data="select_location_tz"))
    return InlineKeyboardMarkup(build_menu(buttons, n_cols=2))

async def generate_invite_button_message(context, entity_type: str, entity_id: int, creator_id: int, entity_name: str, additional_info: str = "") -> tuple:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—É—â–Ω–æ—Å—Ç–∏ (–æ—á–µ—Ä–µ–¥–∏/–≥—Ä—É–ø–ø–µ) –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, reply_markup)"""
    
    if entity_type == "queue":
        payload = JOIN_QUEUE_PAYLOAD
        entity_type_name = "–æ—á–µ—Ä–µ–¥–∏"
        reply_markup = await create_join_queue_button(context, entity_id, creator_id)
    elif entity_type == "group":
        payload = JOIN_GROUP_PAYLOAD
        entity_type_name = "–≥—Ä—É–ø–ø—ã"
        reply_markup = await create_join_group_button(context, entity_id, creator_id)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏")

    message_text = (
        f"üîó *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ {entity_type_name}*:\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *{entity_name}*\n"
        f"{additional_info}\n"
        f"‚û° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
    )
    
    return message_text, reply_markup