from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, ReplyKeyboardRemove, LinkPreviewOptions
from telegram.ext import CallbackContext
from datetime import datetime
import logging
from geopy.distance import geodesic
from db import get_queue_by_id, get_queue_name_by_id, add_user_to_queue, get_queue_users_names, get_queue_users_ids, get_user_name
from config import GET_LOCATION_URL
from varibles import GMT_PLUS_5, max_distance

logger = logging.getLogger(__name__)

async def send_notification(user_id: int, message: str, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await context.bot.send_message(user_id, message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    """–°–æ–±–∏—Ä–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return InlineKeyboardMarkup(menu)

def build_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = [
        InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏", callback_data="show_queues"),
        InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")
    ]
    return build_menu(buttons, n_cols=1)

def build_location_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    buttons = [
        InlineKeyboardButton("üèõ –ú–∞—Ç–§–∞–∫", callback_data="location_mathfac"),
        InlineKeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="location_custom")
    ]
    return build_menu(buttons, n_cols=1)

def validate_date(date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã."""
    try:
        datetime.strptime(date_str, "%d.%m.%y")
        return True
    except ValueError:
        return False

def validate_time(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

async def check_distance_and_join(update, context, queue_id, user_id, lat, lon):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å."""
    queue = await get_queue_by_id(context.bot_data['conn'], queue_id)
    if not queue:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return

    target_coordinates = (queue["latitude"], queue["longitude"])
    user_coord = (lat, lon)
    distance = geodesic(user_coord, target_coordinates).meters
    location_message = await update.effective_message.reply_location(
        latitude=lat,
        longitude=lon,
        reply_markup=None
        )
    context.user_data['location_message_id'] = location_message.message_id

    if distance <= max_distance:
        join_time = datetime.now(GMT_PLUS_5).isoformat()
        add_user_to_queue(context.bot_data['conn'], queue_id, user_id, join_time)  # Corrected
        await update.message.reply_text(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å {queue['queue_name']}.", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å.", reply_markup=ReplyKeyboardRemove())

async def create_join_queue_button(context, queue_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏'."""
    deeplink = f"https://t.me/{context.bot.username}?start=join_{queue_id}"
    keyboard = [[InlineKeyboardButton("üìå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏", url=deeplink)]]
    return InlineKeyboardMarkup(keyboard)

async def send_queue_created_message(update, context, queue_name, start_time, reply_markup):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏."""

    message = await update.effective_message.reply_text(
        f"‚úÖ –û—á–µ—Ä–µ–¥—å *{queue_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üïí\n"
        f"üìÜ –î–∞—Ç–∞: *{start_time.strftime('%d.%m.%y')}*\n"
        f"‚è∞ –í—Ä–µ–º—è: *{start_time.strftime('%H:%M')}*\n\n"
        f"‚û° *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!*",
        parse_mode="Markdown",
        reply_markup=reply_markup,
        link_preview_options=LinkPreviewOptions(is_disabled=True)
    )
    return message

def build_queues_menu(queues_list):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—á–µ—Ä–µ–¥–µ–π."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"join_queue_{queue['queue_id']}") for queue in queues_list]
    return build_menu(buttons, n_cols=1)

def build_delete_queue_menu(queues_list):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"delete_queue_{queue['queue_id']}") for queue in queues_list]
    return build_menu(buttons, n_cols=1)

def build_leave_queue_menu(user_queues):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"leave_{queue['queue_id']}") for queue in user_queues]
    return build_menu(buttons, n_cols=1)

def build_skip_turn_menu(user_queues):
     """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞."""
     buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"skip_{queue['queue_id']}") for queue in user_queues]
     return build_menu(buttons, n_cols=1)

def build_queue_info_menu(user_queues):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö."""
    buttons = [InlineKeyboardButton(queue['queue_name'], callback_data=f"info_{queue['queue_id']}") for queue in user_queues]
    return build_menu(buttons, n_cols=1)
    
async def generate_queue_info_message(conn, queue_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏."""
    queue_name = get_queue_name_by_id(conn, queue_id)
    if not queue_name:
        return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏."

    users_list = get_queue_users_names(conn, queue_id)
    if not users_list:
        return "üîç –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    users_text = ""
    queue_users_ids = get_queue_users_ids(conn, queue_id)

    for i, user_id in enumerate(queue_users_ids):
        user_name = get_user_name(conn, user_id)
        users_text += f"{i+1}. {user_name if user_name else '(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)'}\n"

    return f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏ {queue_name}:\n{users_text}"

def build_web_app_location_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Web App."""
    keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", web_app=WebAppInfo(url=GET_LOCATION_URL))]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def build_group_menu(groups: list[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø."""
    buttons = [InlineKeyboardButton(group['group_name'], callback_data=f"join_group_{group['group_id']}") for group in groups]
    return build_menu(buttons, n_cols=1)

def build_select_group_menu(groups: list[dict], with_no_group: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏."""
    buttons = []
    if with_no_group:
        buttons.append(InlineKeyboardButton("–ë–µ–∑ –≥—Ä—É–ø–ø—ã", callback_data="select_group_none"))
    buttons.extend([InlineKeyboardButton(group['group_name'], callback_data=f"select_group_{group['group_id']}") for group in groups])
    return build_menu(buttons, n_cols=1)

def build_leave_group_menu(user_groups: list[dict])-> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø."""
    buttons = [InlineKeyboardButton(group['group_name'], callback_data=f"leave_group_{group['group_id']}") for group in user_groups]
    return build_menu(buttons, n_cols=1)

def build_delete_group_menu(groups: list[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø."""
    buttons = [InlineKeyboardButton(group['group_name'], callback_data=f"delete_group_{group['group_id']}") for group in groups]

    return build_menu(buttons, n_cols=1)